name;ring;quadrant;isNew;description
Apache Kafka para grandes volumes de dados;Adote;Ferramentas;TRUE;"<p>Pelos testes que fizemos e pelo que acompanhamos no mercado, o Kafka se mostrou bastante robusto, com uso bem forte na área de Data. Por essa ótima experiência de uso, a maioria das pessoas acabam sentindo a necessidade de adotá-lo, o que é normal e esperado. Porém, em alguns cenários específicos, por exemplo de baixa complexidade como a integração de sistemas, o uso do Kafka pode ser um ""tiro de canhão"". Soluções simples de fila de eventos ou até mesmo refatorar a aplicação para utilizar uma simples chamada http podem resolver. Não levar em consideração as complexidades de uma ferramenta de comunicação assíncrona pode levar a problemas. Já tivemos exemplos reais na Globo em que essa alta complexidade ""desnecessária"" impactou as entregas do time. Mesmo escolhendo seguir com a comunicação assíncrona, considere também ler o tópico sobre o Apache ActiveMQ para entender alguns trade-offs necessários. Para cenários em que existe a necessidade de se lidar com um alto volume de dados de forma assíncrona, recomendamos o ADOTE para o Kafka. </p>"
Redis (como cache);Adote;Ferramentas;TRUE;<p>Dividimos em recomendações: o Redis como banco de dados de persistência e o Redis como cache. Para o Redis enquanto cache, recomendamos adotar devido às nossas necessidades e às informações que precisamos armazenar. Para Redis enquanto banco de dados, embora ofereça uma infraestrutura de persistência, pode trazer muitas complexidades no desenvolvimento de paginações e queries que um banco de dados tradicional oferece. Assim, nesse cenário, recomendamos evitar. Quanto ao Redis como cache, recomendamos adotar, pois vemos um grande crescimento no uso em vários times da Globo, somente com experiências positivas.</p>
Análise estática de código na pipeline;Adote;Técnicas;TRUE;<p>Ferramentas como o Sonar são bastante importantes para detectar bugs, code smells, e vulnerabilidades de segurança. É bastante raro um caso em que a recomendação da ferramenta não é a melhor. A visibilidade que a ferramenta dá sobre a qualidade do projeto é essencial. Não só isso, vemos pouco ou quase nenhum motivo para não usar, visto que impacta positivamente a produtividade do time e da pipeline de CI. Exemplos de ferramentas que usamos para as linguagens mais comuns na Globo: ESLint para JavaScript, golint para go, flake8 para Python.</p>
Echo;Adote;Linguagens de Programação e Frameworks;TRUE;<p>O Echo é um framework de aplicação web minimalista de alta performance em Go, que permite desenvolver APIs e aplicativos web. Na Globo, utilizamos em alguns projetos e estamos tendo muitos feedbacks positivos como baixa complexidade de uso, principalmente para os times que desenvolvem em GoLang, como o Globo ID, entre outros. É importante salientar que devido à maturidade da tecnologia, ela acaba se sobrepondo em comparação a outras alternativas e que parte da adoção do echo nos times da Globo vem do fato de ter sido o primeiro framework difundido. Ainda não vemos motivo para mudar a recomendação para outras alternativas, mas continuaremos avaliando-as no futuro.</p>
Sentry;Adote;Ferramentas;TRUE;<p>O Sentry é usado como parte da nossa plataforma de monitoramento para rastreamento de erros, tanto no client como no backend. Boa parte dos nossos times fizeram uso e tivemos uma excelente experiência. </p>
Terraform;Adote;Ferramentas;TRUE;<p>O Terraform é uma ferramenta de provisionamento de infraestrutura como código muito utilizado no mercado e cuja experiência de uso tem se mostrado ótima. Essa sugestão é um forte Adote e representa bastante o caminho da empresa no futuro, principalmente com a migração para a nuvem do Google. Sentimos a necessidade de colocar essa sugestão não só pelos benefícios da ferramenta em si, mas também para sinalizar de forma clara essa direção. Hoje, grande parte da infraestrutura em uso é provisionada a partir de plataformas internas que abstraem a complexidade da nuvem sob aspectos de segurança, permissionamento, rede, etc. Estamos falando aqui de plataformas como o DbaaS, Tsuru, KaaS, entre outras. A maioria dessas plataformas internas continua e continuará existindo e o Terraform, por meio de seus providers customizados que a Globo está criando, irá atuar em cima delas para provisionar os recursos. Ou seja, teremos o melhor dos mundos: continuaremos com as plataformas que já conhecemos, teremos um infra-as-code com ferramentas modernas e não necessariamente estaremos fortemente ligados a nenhum provedor de nuvem específico. Esse é um passo que possibilitará a adoção mais abrangente de outros passos, como pipelines-for-infrastructure-as-code. Hoje, grande parte da infraestrutura em uso é provisionada a partir de plataformas internas que abstraem a complexidade da nuvem sob aspectos de segurança, permissionamento, rede, etc. Estamos falando aqui de plataformas como o DbaaS, Tsuru, KaaS, entre outras. A maioria dessas plataformas internas continua e continuará existindo e o Terraform, por meio de seus providers customizados que a Globo está criando, irá atuar em cima delas para provisionar os recursos. Ou seja, teremos o melhor dos mundos: continuaremos com as plataformas que já conhecemos, teremos um infra-as-code com ferramentas modernas e não necessariamente estaremos fortemente ligados a nenhum provedor de nuvem específico. Esse é um passo que possibilitará a adoção mais abrangente de outros passos, como pipelines-for-infrastructure-as-code.</p>
Prometheus;Adote;Ferramentas;TRUE;<p>Ferramenta bastante poderosa que usamos para monitoramento e alerta em tempo real. Vários de nossos times estão usando e, apesar de poderosa, ainda temos dificuldades em mantê-la com escalabilidade. O nosso time de devops é responsável por manter e escalar e, devido a alta demanda, o custo acaba diretamente afetado. Recomendamos adotar, porém, deixando clara a importância de ter um time de infraestrutura responsável por mantê-la.</p>
MySQL;Adote;Plataformas;TRUE;<p>O MySQL possui forte utilização na Globo e boa experiência de uso. Contudo, é importante avaliar o uso de outras soluções para problemas em que a performance é mandatória. Não estamos dizendo que o MySQL não apresenta boa performance mas, especialmente quanto à performance de escrita, ele possui certa limitação a nível de escala, o que não ocorre em relação à performance de leitura, na qual a escalabilidade consegue acontecer. É importante salientar que a necessidade da Globo de escalabilidade é alta, especialmente em produtos dinâmicos como o Globoplay, Continue Watching API, Cartola, entre outros. Para esse tipo de cenário, talvez o uso do MongoDB ou Cassandra sejam mais recomendados (o que fizer mais sentido para o caso de uso, não necessariamente essas opções), pois possuem capacidade superior para escalar dados. </p>
SRE;Adote;Técnicas;TRUE;<p>Site reliability engineering (SRE) é um conjunto de princípios e práticas que incorporam aspectos de engenharia de software e os aplica a problemas de infraestrutura e operação. Os principais objetivos são criar sistemas de software escaláveis e altamente disponíveis. Segundo o Google, SRE pode ser descrito como uma implementação específica dos conceitos de DevOps. Além dos benefícios diretos da adoção, entendemos que os princípios e práticas auxiliam, por meio de critérios claros e objetivos acordados entre produto, gestão e desenvolvimento, no processo decisório entre o desenvolvimento de novas features e o investimento na resiliência dos projetos. Aqui na Globo, há um time de infraestrutura de SRE que fomenta e promove a cultura de SRE e que auxilia os times de desenvolvimento na implementação e adoção dos princípios e práticas.</p>
DBaaS da Globo;Adote;Plataformas;TRUE;<p>É a plataforma oficial de provisionamento de banco de dados que usamos na Globo. </p>
Tsuru;Adote;Plataformas;TRUE;<p>Hoje, a grande maioria dos nossos serviços são implantados no Tsuru. É uma PaaS (Plataforma como Serviço) bem vista tanto na globo como no mercado, por ser um software de código aberto, com foco na produtividade do desenvolvedor. Podemos dizer que o tsuru é um dos grandes cases de sucesso na empresa, com vasta adoção e ótima experiência de uso pelos times de desenvolvimento. É um forte Adote sob todos os aspectos.</p>
Opinionated and automated code formatting;Adote;Técnicas;TRUE;<p>Gostamos bastante de ferramentas como o Prettier para JavaScript e Black para Python, dentre outras. Elas resolvem um problema que sempre existiu entre times de desenvolvimento: discussões onerosas de padrão de código que muitas vezes são acaloradas. Ter um padrão já decidido e automatizado, geralmente bastante alinhado com as boas práticas do mercado, libera o tempo dos times de desenvolvimento para outros assuntos.</p>
Gitlab CI;Adote;Ferramentas;TRUE;<p>Usamos para rodar o pipeline de quase todos os nossos projetos, com exceção dos projetos mobile. O principal ponto é a conveniência, com diversas soluções de CI/CD no mercado, quase todas provendo funcionalidades similares. Utilizar uma que já está integrada ao repositório privado facilita. É importante ressaltar algumas das vantagens do Gitlab: número de repositórios ilimitados, integração contínua integrada, armazenamento de repositórios em servidores privados. </p>
Grafana;Adote;Ferramentas;TRUE;<p>Grafana é uma ferramenta web na qual os usuários finais podem criar painéis de monitoramento complexos usando consultas interativas. É geralmente muito utilizada em conjunto com o Prometheus para monitorar os recursos computacionais (ex: CPU, memory, disk, I/O), mas não se restringe a isso. Sob alguns aspectos parecido com o Kibana, o Grafana provê os dashboards a partir de métricas e monitoramento (e não de logs). É importante que essa diferença fique clara antes de se decidir entre uma ferramenta ou outra. Diferentemente do Prometheus, não possui problemas de escalabilidade na Globo em relação à manutenção operacional. Assim, qualquer time pode incluir um datasource e já começar a utilizar o Grafana.</p>
React Hooks;Adote;Linguagens de Programação e Frameworks;TRUE;<p>Com base nas nossas experiências dentro do nosso contexto da Globo, recomendamos adotar. Tem sido uma solução bacana para gestão de estado em componentes React, contribuindo diretamente para a construção de um código mais elegante. Existem exemplos bem sucedidos de projetos que têm se beneficiado da mudança para o uso de Hooks em vários times do Hub Digital.</p>
BigQuery;Adote;Ferramentas;TRUE;<p>É um serviço de armazenamento de dados de baixo custo, que não requer uma infraestrutura responsável pelo gerenciamento nem um administrador de banco de dados. É também altamente escalonável, econômico e voltado para o gerenciamento, análise e suporte de grandes volumes de dados. Já é utilizado em alguns times com sucesso, especialmente na área de BigData. Gostamos pelo fato de já ser uma solução GCP com boa performance.</p>
Material UI;Adote;Linguagens de Programação e Frameworks;TRUE;<p>Essa é uma recomendação bastante direta, concilia duas coisas que já usamos (Material Design e React) e são Adote. É uma biblioteca React que implementa o Material Design do Google. Utilizamos no backstage-admin e backstage-console com sucesso, entre outros projetos. Uma ressalva importante consiste no cuidado em relação ao contexto de uso já tratado em outros momentos. Para interfaces administrativas internas, a sugestão é o uso do Backstage Admin, que já implementa o Material UI e fornece várias facilidades para os times de desenvolvimento. </p>
Ansible;Adote;Ferramentas;TRUE;"<p>Nós estamos usando tanto o Terraform quanto o Ansible, pois são complementares e ferramentas oficiais que possuem suporte de infraestrutura. Não apenas oficiais, mas já houve conversas para definir ambas como o futuro, saindo do uso da ferramenta Puppet. O Terraform é responsável pela parte de orquestração e o Ansible pela parte de configuração. Esse caráter complementar das duas ferramentas é um ponto importante a ressaltar, apesar de terem algumas ""sombras"" de intercessão.</p>"
Yarn (package manager);Adote;Ferramentas;TRUE;<p>É uma versão sofisticada do npm. Muitos times da Globo já fizeram essa substituição. De forma bem direta, é um npm melhor.</p>
Makefile por projeto;Adote;Técnicas;TRUE;<p>É uma sugestão bem simples, mas às vezes mesmo simples pode ser importante. Nada melhor do que o onboarding de um projeto contando com os principais comandos para rodar os testes, instalar dependências, subir a aplicação, etc. A experiência do desenvolvedor é algo importante aqui. A ausência de um makefile por projeto não estimula a automatização das etapas essenciais no processo de desenvolvimento e pode indicar uma cultura de não automatizar tudo o que for repetitivo durante o caminho até a produção.</p>
Python 3;Adote;Linguagens de Programação e Frameworks;TRUE;<p>Python foi a linguagem mais utilizada na Globo segundo o último levantamento feito. A simplicidade e o ecossistema fazem dela uma boa opção para um grande repertório de problemas que atacamos. As cargas de trabalho que ainda estão na versão 2 do Python, que já atingiu o fim de seu ciclo de vida, devem ser migradas para as versões mais atuais. Algumas características da linguagem a tornam super querida entre os times (ex.: sintaxe, tempo de desenvolvimento e prototipação). Devemos também nos atentar à existência de outras linguagens que podem facilitar a nossa vida ao atacar problemas específicos, como paralelismo muito alto e tempos de resposta de sub-milisegundo.</p>
Kotlin para mobile;Adote;Linguagens de Programação e Frameworks;TRUE;<p>É uma linguagem que possui boa performance e recomendamos adotar nos times mobile. Para quem já possui domínio em Java, por exemplo, a migração e aprendizado têm sido bastante suaves. Basicamente, não temos nenhum ponto contra, somente pontos a favor. No contexto mobile, é a linguagem oficial recomendada para o desenvolvimento nativo Android pelo Google. O fato de estar casada com a estratégia de desenvolver cada vez mais em KMM constitui mais um motivo positivo. Ressalte-se que a recomendação de Adote é para esse contexto mobile. No contexto de desenvolvimento de servidor, essa classificação não se aplica.</p>
Infrastructure as code;Adote;Técnicas;TRUE;<p>Está bem estabelecido na Globo. O tsuru está criando um provider oficial para Terraform, fazendo com que esta realidade de tratar a infraestrutura como código se estenda para quase todos os times. Uma das ideias é tentar acabar com os scripts individuais e command lines gigantes para provisionamento e deixá-los no repositório junto com a aplicação.</p>
Gitlab;Adote;Plataformas;TRUE;<p>Ferramenta padrão da Globo para gerenciamento de repositórios git. Falando exclusivamente de projetos mobile, fazemos mais uso do Github, ao invés do Gitlab, fundamentalmente em virtude do melhor suporte a ferramentas e plugins externos cruciais para o desenvolvimento mobile.</p>
Webpack;Adote;Ferramentas;TRUE;<p>É um empacotador de módulos bastante popular e maduro na comunidade. Já faz parte há um certo tempo da nossa stack básica de compilação e build para a grande parte dos nossos projetos de Javascript. </p>
MongoDB;Adote;Plataformas;TRUE;<p>Entre os bancos não relacionais, vemos o MongoDB como um dos principais se formos olhar a utilização em geral no mercado. Hoje, junto com o MySQL é uma das principais escolhas de banco de dados primário. Gostamos bastante da flexibilidade que ele traz e o escalonamento horizontal, especialmente em aplicações com muitas operações de leitura. </p>
Elasticsearch;Adote;Ferramentas;TRUE;<p>É amplamente usado tanto no mercado quanto pelo time da Globo para indexação e busca textual de logs, principalmente por ser performático e escalável para nossas demandas. Sugerimos fortemente adotar, inclusive no contexto dos times usarem a ferramenta de Elasticsearch da própria Globo.com.</p>
Swift;Adote;Linguagens de Programação e Frameworks;TRUE;<p>Um tanto quanto óbvio, enxergamos fortemente que, dentro do desenvolvimento iOS, a recomendação é o uso do Swift ao invés do Objective-C.</p>
Jest;Adote;Ferramentas;TRUE;<p>É o principal TestRunner para Javascript usado pela Globo. Em comparação a outros TestRunners, possui facilidade de configuração, performance no que diz respeito a executar testes em paralelo, feature de snapshot e maturidade em relação aos outros, sendo bastante usado pela comunidade. Apesar de ser algo muito específico, o time da Globo enxerga muito valor na recomendação. </p>
React.js;Adote;Linguagens de Programação e Frameworks;TRUE;<p>Biblioteca Javascript eficiente, declarativa e flexível para a criação de interfaces de usuário. Além de simples e leve, essa biblioteca permite que qualquer desenvolvedor Javascript entenda o básico e comece a criar aplicações com pouco tempo de estudo, incluindo o contexto mobile. Recomendamos avaliar a complexidade do projeto para entender a viabilidade de uso. A depender do cenário, principalmente em casos em que o projeto possui complexidade baixa, talvez não seja tão satisfatório dada a quantidade robusta de coisas que a biblioteca oferece. De maneira geral, é amplamente usada na comunidade e será muito bem vinda dentro dos projetos da Globo.</p>
Golang;Adote;Linguagens de Programação e Frameworks;TRUE;<p>Atendeu todas as nossas expectativas. É muito utilizado e a grande maioria dos nossos times conhecem. Para resolver os problemas da Globo, é totalmente aplicável, principalmente quando se fala em alinhamento de maturidade da linguagem, uso extensivo e alinhamento com as necessidades da Globo. Ressaltamos também nossa percepção da evolução da linguagem ao longo dos anos, saindo de algo que não havia um ecossistema tão robusto para o completo oposto, com ferramentas, bibliotecas e comunidades vibrantes.</p>
Continuous Delivery;Adote;Técnicas;TRUE;<p>É a técnica de desenvolvimento de software na qual as equipes produzem um entregável em ciclos curtos, garantindo que o software possa ser lançado com segurança a qualquer momento. Seguindo na linha de Integração Contínua (Continuous Integration) e Deployment Continuo (Continuous Deployment), com a Entrega Contínua (Continuous Delivery), as funcionalidades e produtos que desenvolvemos chegam até as pessoas usuárias com mais frequência, proporcionando feedbacks valiosos sobre o uso do produto, ajudando a melhorar e direcionar mudanças em ciclos curtos. Não significa que o deploy será feito em todo momento, mas apenas que ele poderá ser feito a qualquer momento. Uma boa definição pode ser encontrada nesse link (veja especialmente a diferença para Continuous Deployment). Recomendamos também ter conversas claras no time sobre o que funciona (ou não) para o time. Gastar um tempo discutindo qual é a definição exata de uma prática e se o time a segue geralmente é uma distração. O objetivo final não é adotar o Continuous Delivery e sim trabalhar da maneira mais efetiva possível sem julgamentos dogmáticos.</p>
Nginx;Adote;Ferramentas;TRUE;<p>O Nginx é um servidor web open-source. É conhecido pela grande escalabilidade que provê e, ao mesmo tempo, por trazer modelos para manipular requisições HTTP/s. Toda a CDN de vídeos da globo o utiliza extensamente. Entendemos que é bastante maduro no mercado e largamente utilizado dentro de nossos times.</p>
Continuous Integration;Adote;Técnicas;TRUE;<p>Prática que estimula que qualquer alteração no código seja passível de ir para produção, acelerando o ciclo de feedback e proporcionando melhoria contínua. Sendo uma prática, exige a adoção de uma cultura de atenção em relação às alterações feitas. Implica utilizar trunk based development ou branches de ciclo curto, testes automatizados com boa cobertura, automação do processo de integração e testes com feedbacks imediatos. Testes, a propósito, devem ser rodados em toda e qualquer alteração, localmente antes de integrar o código, imediatamente após a integração do mesmo em uma ferramenta de integração ou em ambas as situações. Se algo sai errado, a correção de problemas tem prioridade máxima. Em outras palavras, a aplicação deve estar sempre funcionando. Vemos que a grande maioria dos projetos na Globo já utilizam essa prática de alguma forma, mas ainda entendemos que a organização precisa evoluir em alguns aspectos. É uma mudança cultural muito maior do que ter uma pipeline e ter cobertura de testes.</p>
Zap;Adote;Linguagens de Programação e Frameworks;TRUE;<p>Existem outras opções para fazer logging em Go, porém, especificamente para nosso contexto, a lib Zap é bastante usada e testada em alguns projetos. Possui bastante relevância em eficiência e performance e é validada em larga escala de produção. Essa lib possui basicamente dois modos de execução: o modo genérico, por meio do qual é possível passar qualquer tipo de dado, e o modo avançado, em que se deve passar qual o tipo de dado a lib vai enxergar. Como exemplo de caso de sucesso, temos os testes de QA2 que foram bastante eficientes. Além da possibilidade de fazer integrações com outros sistemas, possui também suporte a plugins e extensões.</p>
Bitrise;Adote;Ferramentas;TRUE;<p>O Bitrise é uma ferramenta de CI/CD para uso em desenvolvimento mobile, sendo recomendado o seu uso nesse contexto. Nada impede o uso do Gitlab CI também para desenvolvimento mobile, mas tivemos uma experiência melhor utilizando o Bitrise. Vários times mobile da Globo já utilizaram o Gitlab CI e tiveram muito trabalho configurando workers e mantendo tudo atualizado, o que resultou em uma indisponibilidade da pipeline por dias. No Bitrise, essa experiência é mais fluida e menos onerosa. Outras opções como CircleCI foram avaliadas mas, por questões comerciais, não avançaram.</p>
Backstage;Adote;Plataformas;TRUE;<p>O Backstage provê ferramentas, serviços e plataformas para alavancar o desenvolvimento de soluções digitais da Globo, otimizando esforços de desenvolvimento. O uso do Backstage e suas plataformas é recomendado para os mais variados cenários. Se existe uma solução do Backstage que se encaixe no problema que sua aplicação irá resolver, devem ser levados em consideração os ganhos de tempo e custo que podem ser obtidos. As cargas de trabalho no Backstage são provisionadas com várias facilidades para os times de desenvolvimento, feitas sob medida para o ambiente da Globo.</p>
Serverless architecture;Experimente;Técnicas;TRUE;<p>O uso de arquitetura serverless está bem difundido dentro da empresa. Hoje, contamos com amplo suporte de plataformas internas que nos ajudam a fazer deploy sem o time ter que manter uma infraestrutura física ou virtual. Cargas de trabalho mais simples podem usar o Backstage Functions, APIs podem ser criadas no Backstage APIs, diminuindo o tempo de desenvolvimento e otimizando custos. Apesar de serverless não ser a solução ideal para todos os cenários, seus casos de uso são bem difundidos, sendo uma opção que deve estar na mesa ao arquitetar novas aplicações.</p>
Rancher;Experimente;Plataformas;TRUE;<p>Rancher é o nosso meio oficial de provisionar um cluster Kubernetes (independente da infraestrutura abaixo desse provisionamento, seja nuvem privada ou nuvem pública via GCP/GKS). Temos um time KaaS (Kubernetes as a Service) responsável por manter/configurar a ferramenta para uso na Globo, sendo importante ficar atento às diretivas desse time. Não esperamos que outro time de desenvolvimento configure do zero o Rancher e todas as suas políticas de deploy. Ou seja, antes de tudo, uma vez definido o uso de Kubernetes, utilize todo o trabalho já feito pelo time de KaaS.</p>
Canary Releases;Experimente;Técnicas;TRUE;<p>É uma técnica de rollout de releases de software usada para reduzir o risco de introduzir uma nova versão de software em produção, implementando gradualmente a mudança para um pequeno subgrupo de usuários, antes de implementá-la em toda plataforma/infraestrutura.Para workloads no Tsuru e Kubernetes, ambas as ferramentas já possuem suporte, o que facilita a difusão da técnica. Ainda vemos poucos times fazendo uso dela nos casos em que ela pode ser aplicada. Entendemos que é algo saudável de ser experimentado e o caminho a ser seguido para os times que já possuem uma maturidade boa de entrega, integração contínua e todos os demais fundamentos de engenharia de software. A não classificação dessa técnica em Adote decorre da necessidade de passar essa mensagem aos times para terem esse arcabouço de ferramentas e processos antes da adoção ampla. </p>
Chaos Engineering;Experimente;Técnicas;TRUE;<p>Chaos Engineering é uma técnica que consiste em realizar experimentos sobre sistemas distribuídos, com o intuito de construir confiança em relação à capacidade de um sistema distribuído suportar condições adversas em produção. Antes de mais nada, é uma mudança de mentalidade na forma de tratar a resiliência do software. Já tivemos em webmedia um time que a utilizou com sucesso em uma das nossas APIs. Como resultado, conseguiram detectar bugs que possivelmente iriam ocasionar uma baixa disponibilidade do sistema. Vemos essa técnica como incipiente na Globo, com os times ainda em fase de aprendizado. Já existem ferramentas no mercado que ajudam na sua adoção, como o ChaosMonkey.</p>
Kotlin Multiplataform Mobile (KMM);Experimente;Linguagens de Programação e Frameworks;TRUE;<p>Kotlin Multiplataforma é uma tecnologia que permite a escrita de um único código em Kotlin e a sua execução em diversas plataformas como Android, iOS, Web, Desktop, entre outras. O time de Players Nativos vem usando com sucesso essa tecnologia para compartilhar parte do código responsável pelo carregamento do vídeo entre as plataformas Android, Android TV, iOS e tvOS. Os benefícios mais importantes são a diminuição do esforço na implementação/manutenção de novas features e consistência no comportamento entre plataformas. Um ponto de atenção é em relação a curva de aprendizado de uma tecnologia que ainda é nova e com pouca documentação disponível além da oficial.</p>
Jaeger;Experimente;Ferramentas;TRUE;"<p>Na categoria de ferramentas de log tracing exclusivamente, já existem times da Globo fazendo bom uso do Jaeger, principalmente no backstage, substituindo algumas partes do NewRelic. Consideramos também que o ""concorrente"" Elastic APM não provê uma experiência de uso tão boa. Uma preocupação para o Jaeger é ainda estar em um cenário beta na Globo, em que a capacidade de uso ainda depende do provisionamento de recursos por parte do time que mantém a ferramenta (time tsuru) a fim de que todos os times possam adotá-lo. Vale ressaltar que essa recomendação de Experimente é independente do OpenTelemetry, ou seja, que o OpenTelemetry provê um padrão que será legal de usar no futuro, mas que não contraria o uso do Jaeger.</p>"
Typescript;Experimente;Linguagens de Programação e Frameworks;TRUE;<p>Alguns times estão começando a usar Typescript e estão tendo uma boa experiência. Quando se fala de mercado, é bastante utilizado, possui maturidade e um apoio consolidado da comunidade. Sendo assim, recomendamos experimentar.</p>
OpenTelemetry;Experimente;Plataformas;TRUE;<p>Gostamos do padrão do OpenTelemetry e muito provavelmente será o que iremos adotar no futuro. Contudo, recomendamos alguns cuidados com o uso de bibliotecas que adotem esse padrão. O padrão ser bom e estar maduro não significa que as bibliotecas e ferramentas que o implementam estão maduras. São bibliotecas novas que são um ponto de incerteza dado o contexto de alto volume de dados na Globo. Já tivemos problemas com leaks de memória, por exemplo.</p>
Ferramentas de Teste de Carga no contexto local;Experimente;Ferramentas;TRUE;<p>Sobre testes de carga no contexto local, entendemos que são os testes que rodam na pipeline de CI e/ou na máquina local do desenvolvedor. Especialmente para softwares críticos em relação à performance, esses testes podem ser úteis para acompanhar a performance do serviço de forma contínua e garantir a qualidade. Um ponto de atenção é que esses testes costumam ser caros, mais difíceis de manter e podem gerar falso-positivos, o que talvez explique a baixa adoção entre os times. Várias ferramentas podem suprir essa necessidade e já estão sendo utilizadas pela Globo: Jmeter, Vegeta, etc. Estamos especialmente empolgados com a ferramenta k6 e sugerimos a todos experimentarem. Para o contexto de negócio específico da Globo, esses testes locais não substituem um teste mais abrangente que englobe todos os comportamentos capturados no BBB, principalmente a rajada, mas não somente isso. Um grande esforço (com resultados excelentes) foi feito para capturar o comportamento de uso do usuário final nesses testes e garantir que ele tenha um comportamento fidedigno à realidade da aplicação sob stress. Estamos falando dos testes que rodam hoje no Grou e Avalanche. Entendemos que ainda são testes bastante caros e difíceis de serem executados on-demand (precisam de agendamento prévio), sendo necessário avançar nesse aspecto (a ida para a GCP pode nos ajudar nisso).</p>
Continuous Deployment;Experimente;Técnicas;TRUE;<p>Expandindo os comentários constantes dos tópicos da Continuous Integration (CI) e da Continuous Delivery (CD), verifica-se que o Continuous Deployment é um passo além, visto que realiza o deploy no ambiente de produção de forma automática, enquanto no conceito de CD essa etapa é opcional. Para evitar surpresas nos momentos de lançamentos de funcionalidades, as equipes precisam validar o processo de deploy e disponibilizar ambientes onde as pessoas de operação ou pessoas de negócio validem o que foi desenvolvido antes de ir a um ambiente de produção, disponibilizado às pessoas usuárias em geral, para só depois ir a produção. Cada commit de pessoa desenvolvedora deve passar pelo ciclo de deployment em ambientes de staging para validações mais profundas e estratégicas. É aplicável a alguns nichos específicos mas, especialmente no contexto mobile, em que uma vez distribuída a versão ao usuário final não é possível ter o controle de atualização, devemos ter cuidado.</p>
Novas formas de comunicação remota;Experimente;Ferramentas;TRUE;"<p>Nos últimos anos, caminhamos para uma empresa muito mais distribuída e que, em muitos casos, as pessoas ficam parcialmente em uma das filiais ou até trabalham exclusivamente de forma remota. Diversos times de Backstage, GloboID e Webmedia já exploraram outras formas de comunicação e interação além da comunicação assíncrona por texto (via Slack ou Teams) e das chamadas de vídeo (via Slack, Teams ou Zoom). Esses times têm utilizado ferramentas como Discord e Slack Huddle para terem interações via áudio de modo eventual ou até mesmo de modo contínuo (simulando a presença física na baia de trabalho) e têm tido uma avaliação bem positiva sobre o uso dessas ferramentas de maneira geral. Além dessas, há no mercado ferramentas como o Gather, Pragli, etc. que funcionam de maneira semelhante. Times de produtos (devs, designers, POs, gestão) já estão utilizando o Gather. Entendemos que este novo cenário da empresa demanda ou reforça a oportunidade para se experimentarem novas formas de comunicação que visem não apenas troca de informações sobre um projeto, mas que eventualmente possibilitem interações entre as pessoas. São comunicações que estreitam os laços e que aconteceriam mais facilmente na presença física das pessoas, bem como em momentos como a ""hora do café"" ou a ""hora do lanche"". Um aprendizado trazido por alguns times que adotaram uma dessas ferramentas ou essa forma de trabalho é que se resguardem momentos de concentração e foco para as pessoas.</p>"
Teste de análise estática de segurança na pipeline (SAST);Experimente;Ferramentas;TRUE;<p>O uso de ferramentas para testes de análise estática de código visando à segurança da aplicação (SAST) tem como objetivo trazer conhecimento sobre falhas conhecidas que podem ser exploradas de forma maliciosa. Recomendamos experimentar essa prática em suas aplicações e sugerimos analisar o uso do HuskyCI no seu pipeline, ferramenta de SAST desenvolvida aqui dentro da empresa.</p>
Proxyman;Experimente;Ferramentas;TRUE;<p>Ferramenta de proxy para macOS, iOs e Android. Usamos bastante para fazer proxy HTTP ou SSL, análise de tráfego de rede e também para inspecionar e até modificar a comunicação entre cliente e servidor. De maneira geral, tem apresentado muito mais eficiência do que a ferramenta Charles Proxy, anteriormente utilizada para a mesma finalidade.</p>
Apache ActiveMQ;Avalie;Ferramentas;TRUE;"<p>É importante mencionar aqui que existem algumas etapas antes de decidir a usar o ActiveMQ. Como primeira hipótese, deve-se considerar o uso do Backstage Events, pois já temos um time que gerencia e cuida da ferramenta. Caso o Backstage Events não atenda a algum contexto por algum motivo específico, recomendamos usar o Barramento Backstage, que é uma implementação do ActiveMQ. Não recomendamos que um serviço de barramento novo seja iniciado de forma manual. O nosso time que mantém o Apache ActiveMQ vem se perguntando o porquê de não usarmos o Pub/Sub do GCP ou ""filas like"" como o Kafka. Porém, ainda não temos conclusões acerca disso, pois existem algumas questões envolvidas como o valor de investimento dessa migração. Esse tipo de análise está sendo feita no momento.</p>"
Redux para interfaces externas;Avalie;Linguagens de Programação e Frameworks;TRUE;<p>Nosso entendimento é que o Redux foi feito em outro momento no ciclo de vida do React. Hoje, a stack já avançou e opções mais leves são realidade. No próprio radar da Thoughtworks, esse movimento foi capturado de alguma forma. Contudo, é importante fazer uma avaliação não da tecnologia em si, mas da motivação de usá-la. Se a motivação para usar o Redux for o desenvolvimento de uma interface interna à Globo, a recomendação é utilizar o Backstage Admin. Porém, se a motivação for usar em outros casos, como interfaces externas, recomendamos avaliar (com cuidado).</p>
GraphQL;Avalie;Linguagens de Programação e Frameworks;TRUE;"<p>Vemos alguns pontos interessantes no GraphQL: o padrão de comunicação da ferramenta é bom, possui uma ideia interessante e que do ponto de vista do consumidor de dados ter algo centralizado facilita muito. Contudo, temos que ficar atentos para não cair no ""hype"" da tecnologia. Já sentimos que isso acontece algumas vezes e, entre os pontos negativos, vemos o fato do GraphQL jogar a responsabilidade de refatoração para o lado servidor. Ter um único endpoint pode facilitar, mas às vezes isso pode dar a impressão de ser uma ""bala de prata"", o que certamente não é o caso. Para o uso, temos que ter alguns cuidados como o processamento excessivo por conta complexidade de funcionamento de uma aplicação que usa GraphQL acarretando diretamente em um custo elevado de CPU.</p>"
NodeJS para backend;Avalie;Linguagens de Programação e Frameworks;TRUE;<p>Existem outras linguagens que poderiam atender às nossas necessidades, mas entendemos que há projetos em que node.js é usado principalmente por ter um ecossistema bastante expansivo. É importante frisar que GoLang e Python já são bastante maduros nos nossos times e devem ser avaliados. Dado isso, recomendamos avaliar a real necessidade de se adotar o node.js em algum projeto.</p>
BFF - Backend for frontends;Avalie;Técnicas;TRUE;<p>A ideia do BFF é ter vários dispositivos com algumas particularidades. Nesse caso, entendemos que o próprio time de frontend ficaria responsável pela manutenção. Muitas vezes, as pessoas que usam sentem dificuldade em entender se o caso de uso que está sendo desenvolvido é aplicável. Nesse link, você consegue entender de maneira geral o padrão do BFF. Recomendamos bastante a leitura para ficarem claro os conceitos, aplicabilidade e erros comuns.</p>
Blue-Green Deployment;Avalie;Técnicas;TRUE;<p>Ressaltamos a importância de avaliar a cada projeto para entender a necessidade de aplicabilidade do Blue-Green Deployment, incluindo a maturidade do processo de CI/CD neste julgamento. O tsuru e outras plataformas que temos já oferecem meios para um deploy progressivo e seguro, mas não necessariamente pelo modo blue-green.Veja o tópico de Canary Releases.</p>
Testes funcionais;Avalie;Técnicas;TRUE;<p>Somos grandes fãs de testes de todos os tipos e gostos. Contudo, testes funcionais é uma prática que, ao ser adotada, alguns pontos devem ser considerados: é de difícil manutenção, podendo ser caro de se manter e até gerar falsos positivos (ou falsos negativos). Requer um ferramental mais específico e mais maduro que talvez não esteja disponível para uma grande variedade de sistemas. No contexto de microsserviços, gostamos bastante da definição das estratégias e de prós e contras que podem ser vistos neste link. Trata-se de uma leitura obrigatória. Rodar um teste funcional sobre um microsserviço requer que todas as dependências internas e externas estejam funcionando, as quais possuem, por sua vez, suas próprias dependências. No contexto de bibliotecas, pode ser difícil mensurar como testar o uso da biblioteca no produto final. Já no contexto de interfaces com o usuário, ferramentas como o Cypress funcionam excepcionalmente bem. Sugerimos avaliar o uso dos testes funcionais. Porém, é preciso ter muita certeza de que a sua adoção irá agregar valor para o projeto e/ou equipe no contexto em questão.</p>
Kubernetes;Avalie;Plataformas;TRUE;"<p>Entendemos claramente a maturidade, grande número de funcionalidades, casos de uso e ecossistema vibrante do Kubernetes. É uma tecnologia que desde 2017 já aparece como dominante(!) no mercado sob várias formas e sabores. Contudo, traduzindo para o contexto da Globo, ainda vemos os pontos de dor relacionados à integração da tecnologia às práticas e diretivas da empresa, como segurança e redes. Colocando de outra forma, não é ""só ir no GCP e subir um cluster GKS"" e pronto. Ou mesmo subir um cluster na própria plataforma interna KaaS. Já tivemos experiências de subir um cluster sob todas as nuances possíveis e todas elas possuem um calcanhar de aquiles que ainda necessita de tempo e dinheiro para resolver. O ponto aqui não é discutir o porquê dessa dificuldade e se ela é válida ou não, mas apenas declarar que é um fato por questões históricas. Por último, vemos também baixo uso do Kubernetes entres os times, indicando que outras opções (tsuru?) atenderam perfeitamente a necessidade do negócio. Contudo, é interessante mencionar que, por mais que existam pontos de interseção entre Kubernetes x Tsuru, ambos são complementares. O próprio Tsuru usa o Kubernetes “por baixo dos panos”. Esse entendimento do escopo de cada ferramenta é algo que convidamos todos a pesquisar e entender.</p>"
Device Farm;Avalie;Ferramentas;TRUE;<p>Device Farm é uma alternativa para testes funcionais de aplicações mobile (Android e iOS), principalmente no cenário de trabalho remoto. A ferramenta permite testar aplicações mobile em diversos navegadores, inclusive possibilitando gerenciar a infraestrutura. Mesmo antes da pandemia, já tentamos montar internamente uma farm de devices na Globo, mas foi algo oneroso sob vários aspectos e que não deu muito certo. Com o trabalho remoto consolidado, a necessidade de adotar essa alternativa ficou ainda maior. É de grande relevância, ao menos para nós, avaliar a aplicabilidade dessa técnica para, aos poucos, ir difundindo o seu uso entre os times.</p>
Django;Evite;Linguagens de Programação e Frameworks;TRUE;<p>Tivemos a experiência de eliminar o Globo Core, que era a nossa principal plataforma em Django. Hoje, nós temos frameworks mais adequados a nossos tipos de demandas, que são serviços distribuídos. Com isso, acreditamos que a nossa história mostra um pouco o porquê de não recomendarmos o uso do Django, e até mesmo de evitar, especificamente dentro do contexto da Globo. É importante salientar que, devido à evolução do mundo web, estamos utilizando ferramentas mais atualizadas como o próprio Backstage Admin para interfaces administrativas, FastApi, Tornado e aiohttp para microsserviços em Python, dentre outros.</p>
Java para Web/Microserviços;Evite;Linguagens de Programação e Frameworks;TRUE;<p>Entendemos claramente que o Java é uma linguagem largamente utilizada sob vários aspectos, tanto na Globo quanto no mercado, e o Evite dessa classificação não é uma avaliação de quão boa a linguagem é. Contudo, vemos especialmente no contexto de desenvolvimento de APIs em geral, outras linguagens na Globo como Go e Python ganhando relevância e cobrindo a maioria dos requisitos que Java também atende. O uso de Python e Go gera uma maior sinergia entre times, pessoas e processos que não deve ser desprezada. No contexto de desenvolvimento mobile, Java é uma opção válida, mas da mesma forma, vemos o Kotlin Multiplataforma Mobile ganhando terreno. Tentamos ser bastante opinativos nessa classificação, mas de forma alguma isso deve se sobrepor a uma análise caso a caso em que o Java pode ser a melhor opção, inclusive considerando todo o parque tecnológico na Globo que já o utiliza.</p>
Scala;Evite;Linguagens de Programação e Frameworks;TRUE;<p>Observamos uma complexidade na manutenção do código relacionada às experiências que tivemos dentro da Globo. Existe também um sentimento de que a linguagem não tem uma comunidade e ecossistema tão vibrantes. Mesmo no contexto de big data, em que Scala tem uma adoção maior, vemos alternativas mais simples de obter o mesmo resultado. Principalmente para Spark, Python seria a indicação para a maioria dos casos de uso em que aceitamos ter uma ligeira perda de performance em relação ao Scala.</p>
Elixir;Evite;Linguagens de Programação e Frameworks;TRUE;<p>Em nossa experiência com Elixir, observamos que o problema não é a linguagem em si, mas o arcabouço em volta. Bibliotecas, ferramentas, e mesmo conhecimento no mercado e na empresa são pontos de dor. Tivemos também exemplos de softwares reescritos para outras linguagens devido a essas limitações.</p>
Feature Branching;Evite;Técnicas;TRUE;"<p>Para este tópico, recomenda-se evitar isolar o seu trabalho do restante do time (ex: manter o seu código em uma branch desatualizada da branch principal) por um longo período de tempo. Esse blog define bem o conceito e, resumidamente, é possível listar problemas como a detecção tardia de falhas e o desencorajamento ao refactoring do código. Incluímos também neste tópico o gitflow: vemos o uso dele incentivando essa prática de manter branches isolados por muito tempo e, por isso, também deve ser evitado. No contexto mobile, não possuímos o controle da atualização do aplicativo pelo usuário final. Por isso, temos que manter diversas versões ""legadas"" ao mesmo tempo em branches separadas. Essa necessidade de negócio não vai contra a integração contínua desde que, trabalhando na branch da versão, o seu código mantenha-se constantemente integrado ao código das demais pessoas do time.</p>"
AngularJS;Evite;Linguagens de Programação e Frameworks;TRUE;<p>O Backstage Admin já é a nossa ferramenta oficial para suporte ao desenvolvimento de interfaces administrativas. É importante lembrar que o AngularJS irá perder o suporte no final de 2021. A mensagem aqui é não apenas evitar, mas já pensar em um plano de migração para a stack React/Backstage-Admin para projetos atuais em Angular/AngularJS. Temos pessoas, processos e treinamentos já estabelecidos para o React.</p>
Overambitious API gateways;Evite;Plataformas;TRUE;"<p>Muitos dos nossos times acabavam por implementar API Gateways que eram ""muito ambiciosas"", muitas vezes para resolver problemas de negócio nessa camada. Porém, já é sabido que manter um Gateway com muita regra de negócio não é saudável. Tivemos experiências ruins, especialmente no backstage com relação a isso. Em experiências de times que estão trabalhando com soluções legadas em que a necessidade de refatoração acaba sendo alta, ocasionalmente surge a ideia de colocar um Gateway na frente que vai resolver todos os problemas. Um pouco da inclusão nesse item foi a partir da nossa visão de que trata-se ainda de um problema recorrente. No radar da Thoughtworks, já foi levantada essa discussão sobre alguns assuntos relacionados a esse tema.</p>"
Puppet;Evite;Ferramentas;TRUE;<p>Temos muitas aplicações que usam Puppet e temos o objetivo de migrar para GCP. Nosso time de DevOps já informou que não dará mais suporte ao Puppet. Nesse movimento de orientar para o uso do Terraform, recomendamos evitar e buscar soluções mais atualizadas e robustas.</p>
Ruby;Evite;Linguagens de Programação e Frameworks;TRUE;"<p>Saindo um pouco da avaliação da tecnologia, vemos uma dificuldade em encontrar pessoas com conhecimento em Ruby em quantidade suficiente para a nossa demanda. Mas isso não explica tudo. Especificamente na Globo, grande parte do desenvolvimento de APIs foi migrado para Golang. Um pouco do que já foi citado no blip de Golang e em outros momentos é de que a necessidade de alta performance é bastante crítica para o nosso contexto de negócio e, mesmo quando NÃO exista essa necessidade, a utilização de Golang para manter uma padronização do desenvolvimento (pessoas, ferramentas e processos) ajuda. Para interfaces gráficas, o Ruby on Rails, muitas vezes ""sinônimo"" da linguagem Ruby, vem perdendo espaço já há algum tempo para React, entre outras opções. Vemos também uma comunidade em geral não tão vibrante em comparação a outras e ao passado.</p>"
Python 2;Evite;Linguagens de Programação e Frameworks;TRUE;<p>Já colocamos em outro blip o Adote no Python3, mas fizemos questão de novamente colocar o assunto em pauta. Quem ainda não tiver um roadmap de migração feito (Python2 → Python3) deve considerar fazê-lo. Cada vez mais, vemos bibliotecas para Python2 terem sua manutenção descontinuada.</p>
Github;Evite;Plataformas;TRUE;<p>Mencionado parcialmente em outros blips similares (Gitlab, Bitrise), a recomendação de forma geral para o Github é de Evite. Sempre que possível, utilize o Gitlab privado. Entendemos que o Github é necessário quando existe a necessidade de se integrar com ferramentas externas (CI, verificação de código, testes mobile) que não possuem acesso a esse Gitlab privado e/ou há uma dificuldade maior para isso. Vemos a necessidade dessa ressalva principalmente no contexto de mobile. Outro caso de uso óbvio é para projetos open-source.</p>
Amazon Web Services (AWS) - Cloud computing;Evite;Plataformas;TRUE;<p>Devido à parceria da Globo com o Google, o caminho definido pela nossa empresa sobre o uso de Cloud Computing é darmos prioridade ao GCP. O uso de outro serviço de Cloud deve ser evitado, a menos que a sua aplicação tenha uma necessidade específica. </p>
Gitlab Pages;Evite;Plataformas;TRUE;<p>Hoje, as plataformas já dispõem de um ambiente único de documentação para seus clientes. Entendemos que esses são os locais adequados para as documentações de uso da plataforma. A grande maioria delas utiliza uma instalação com o MkDocs. O MkDocs permite não só uma escrita simples via Markdown como também sofisticações maiores se desejável. Além disso, tem sido o ferramental que funcionou melhor, até o momento, em termos de tê-las mais atualizadas. Independentemente do MkDocs, destacamos que o local adequado para as documentações de uso deveria ser o local único adotado pela plataforma, de forma que os seus clientes não tenham a informação fragmentada em diversos lugares/links. Entretanto, em se tratando da documentação técnica e interna do projeto (arquitetura, comandos úteis, dicas, procedimentos, etc.), o MkDocs pode não ser a melhor opção, podendo o time optar por outro local mais adequado. Nesse caso, parece razoável a utilização de READMEs e/ou Gitlab Pages junto ao projeto.</p>
RabbitMQ;Evite;Ferramentas;TRUE;<p>Software de enfileiramento de mensagens de código aberto. Já usamos outras opções mais adequadas à nossa realidade do que o RabbitMQ, como o nosso Kafka interno ou as ferramentas que o Backstage já fornece: o Barramento e o Events. Conforme mencionado no tópico de Apache ActiveMQ, nossa tendência seria direcionar para esses dois últimos. O ideal é seguirmos a orientação do time de Events para que assim tenhamos um ponto central de integração entre as plataformas.</p>
Rust Programming language;Evite;Linguagens de Programação e Frameworks;TRUE;<p>Linguagem de programação multiparadigma, de alto nível e de propósito geral projetada para desempenho e segurança, especialmente simultaneidade segura. Entendemos ser promissora, apesar de ainda precisarmos, em nosso contexto, de uma evolução no subconjunto de ferramentas, suporte à bibliotecas, maior adesão da comunidade e suporte ao uso da linguagem em si. Ressalta-se, ainda, a necessidade de se ter um conjunto de pessoas na empresa que tenham conhecimento da linguagem de modo a garantir a manutenção das aplicações que, por ventura, venham a ser desenvolvidas usando Rust. Nesse artigo, é possível entender os trade-offs e as abordagens de aplicação em projetos.</p>